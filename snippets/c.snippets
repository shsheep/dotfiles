# priority -50

snippet cof "clang off"
// clang-format off
endsnippet

snippet con "clang on"
// clang-format on
endsnippet

snippet def "#define ..." b
#define $0
endsnippet

# snippet doxyhd "Doxgen Function Header"
# endsnippet

snippet el "else {...}"
else {
    $0
}
endsnippet

snippet elif "else if (...) {...}"
else if ($1) {
    $0
}
endsnippet

snippet err "nRC = fn(...)"
${1:nRC} = ${2:function}
if ($1 ${3:!=} ${4:success} {
    $5
    ${6:return}
}
endsnippet

snippet for "for (...)"
for (${1:i} = ${2:0}; $1 < ${3:count}; ${4:++$1}) {
    $0
}
endsnippet

snippet fori "for (int ...) {"
for (${1:int} ${2:i} = ${3:0}; $2 ${4:<} ${5:count}; ${6:++$2}) {
    $0
}
endsnippet

snippet fpr "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3) {
    $0
}
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet inc "#include <...>" b
#include <$1>$0
endsnippet

snippet func "Basic C++ doxygen function template" b
/**
* @brief: ${4:brief}
* @param: `!p write_docstring_args(t[3],snip)`
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param}) {
    ${0:FunctionBody}
}
endsnippet

snippet fx "Basic function template" b
${1:ReturnType} ${2:FunctionName}(${3:param}) {
    ${0:FunctionBody}
}
endsnippet

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet @func_header "Function Header" 
/******************************************************************************
* Function:         $1
* Description:      ${4:${VISUAL}}
* Where:`!p 
snip.rv = ""
snip >> 2
args = get_args(t[2])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $5
* Error:            $6
*****************************************************************************/
${1}($2)
{
	${0}
}
endsnippet

snippet if "if (...) {...}" b
if ($1) {
    $0
}
endsnippet

snippet mainn "main() {...}"
int main() {
    $0

    return 0;
}
endsnippet

snippet main "main(argc, argv) {...}"
int main(int argc, char* argv[]) {
    $0

    return 0;
}
endsnippet

# snippet once "Include header once only"
# endsnippet

snippet pr "printf(...)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet

snippet templatec "Basic C template" 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <unistd.h>

int main(int argc, char* argv[]) {
    $0
    return 0;
}
endsnippet

global !p
def split_line(text):
	import textwrap
	lines = textwrap.wrap(text, 78 - 19)
	output = list()
	for line in lines:
		output.append('*' + ' '*19 + line)
	snip_line = snip.tabstops[4].end[0]
	snip.buffer.append(output, snip_line + 1)
	del snip.buffer[snip_line]
def get_args(arglist):
	args = [arg.strip() for arg in arglist.split(',') if arg]
	return args
endglobal

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet @file_header "File Header" b
/******************************************************************************
* File:             `!p snip.rv = fn`
*
* Author:           ${2}  
* Created:          `date +%m/%d/%y` 
* Description:      ${4}
*****************************************************************************/
${5}
endsnippet

snippet wh "while ( ... ) {" b
while (${1:condition}) {
    $0
}
endsnippet

# ==================== Barely used ==================== #
snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

# vim:ft=snippets:
