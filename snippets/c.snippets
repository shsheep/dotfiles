###########################################################################
#                            TextMate Snippets                            #
###########################################################################

# priority -50

snippet @comm "/****..."
/******************************************************************************${1}
 ******************************************************************************/${VISUAL}
endsnippet


snippet #def "#define ..."
#define ${VISUAL}
endsnippet

snippet @elif "else if .. (eli)"
else if ($1)
{
	$2
}$3${VISUAL}
endsnippet

snippet @else "else {...}"
else
{
	$1
}$2${VISUAL}
endsnippet

snippet @for "for loop (for)"
for (${1:i} = ${2:0}; $1 < ${3:count}; ${4:++$1})
{
	$5
}$6${VISUAL}
endsnippet

snippet @fori "for int loop (fori)"
for (${1:int} ${2:i} = ${3:0}; $2 < ${4:count}; ${5:++$2})
{
	$6
}$7${VISUAL}
endsnippet

snippet @func "function" b
${1:void} ${2:function_name}($3)
{
	$4
}${VISUAL}
endsnippet

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet @func_header "Function Header" 
/******************************************************************************
* Function:         $1
* Description:      ${4:${VISUAL}}
* Where:`!p 
snip.rv = ""
snip >> 2
args = get_args(t[2])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $5
* Error:            $6
*****************************************************************************/
${1}($2)
{
	${0}
}
endsnippet

snippet @fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

snippet #inc "#include ..."
#include <${1}>
${VISUAL}
endsnippet

snippet @if "if (...) {...}" 
if (${1})
{
	${2}
}${VISUAL}$3
endsnippet

snippet @mainn "main() {...}"
int main()
{
	${VISUAL}$0

	return 0;
}
endsnippet

snippet @main "main(argc, argv) (main)"
int main(int argc, char *argv[])
{
	${VISUAL}$0

	return 0;
}
endsnippet

snippet @p "printf(...)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet @st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet

snippet @template "basic template"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
	${VISUAL}$1

	return 0;
}
endsnippet

global !p
def split_line(text):
	import textwrap
	lines = textwrap.wrap(text, 78 - 19)
	output = list()
	for line in lines:
		output.append('*' + ' '*19 + line)
	snip_line = snip.tabstops[4].end[0]
	snip.buffer.append(output, snip_line + 1)
	del snip.buffer[snip_line]
def get_args(arglist):
	args = [arg.strip() for arg in arglist.split(',') if arg]
	return args
endglobal

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet @file_header "File Header" b
/******************************************************************************
* File:             `!p snip.rv = fn`
*
* Author:           ${2}  
* Created:          `date +%m/%d/%y` 
* Description:      ${4}
*****************************************************************************/
${5}
endsnippet

snippet @while "while () {...}"
while (${1})
{
	${VISUAL}$2
}
endsnippet

# ==================== Barely used ==================== #
snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet
# vim:ft=snippets:
