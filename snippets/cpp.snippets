priority -50

extends c
priority -49

global !p
def write_docstring_args(arglist, snip):
    args = str(arglist).split(',')
    if len(args) > 1:
        c = 0
        for arg in args:
            if c == 0:
                snip.rv += arg
                c = 1
            else:
                snip += '*       : %s' % arg.strip()
    else:
        snip.rv = args[0]
endglobal

snippet cl "class .. (class)" b
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
    ${1/(\w+).*/$1/} (${2:arguments});
    virtual ~${1/(\w+).*/$1/} ();

private:
    ${0:/* data */}
};
endsnippet

# snippet clh "" b
# endsnippet

snippet ci "cin <<"
cin >> $0
endsnippet

snippet sci "std::cin <<"
std::cin >> $0
endsnippet

snippet co "cout <<"
cout << $0
endsnippet

snippet sco "std::cout <<"
std::cout << $0
endsnippet

# snippet for "for ( ... )" b
# for (${1:int} ${2:i} = ${3:0}; $2 < ${4:count}; ${5:++$2}) {
#    ${6:expression}
# }$0

# endsnippet

snippet map "map<key, val> var"
map<${1:key}, ${2:val}> ${3:var};$0
endsnippet

snippet smap "std::map<key, val> var"
std::map<${1:key}, ${2:val}> ${3:var};$0
endsnippet

snippet set "set<type> var"
set<${1:type}> ${2:var};$0
endsnippet

snippet sset "std::set<type> var"
std::set<${1:type}> ${2:var};$0
endsnippet

snippet str "string var"
string ${1:var};$0
endsnippet

snippet sstr "std::string var"
std::string ${1:var};$0
endsnippet

snippet vec "vector<type> var"
vector<${1:type}> ${2:var};$0
endsnippet

snippet svec "std::vector<type> var"
std::vector<${1:type}> ${2:var};$0
endsnippet

snippet templatecpp "Basic C++ template" 
#include <algorithm>
#include <array>
#include <deque>
#include <fstream>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

int main (int argc, char* argv[]) {
    $0
    return 0;
}
endsnippet

snippet wh "while ( ... ) {" b
while (${1:condition}) {
    $0
}
endsnippet

# TODO
snippet @cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
    private:
        $3

    public:
        $1();
        virtual ~$1();
};

#endif /* $2 */
endsnippet

#===============================Barely Used===============================#
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
char buf[1024];
while(size_t len = fread(buf, 1, sizeof(buf), fp))
v.insert(v.end(), buf, buf + len);
fclose(fp);
}
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet func "Basic C++ doxygen function template" b
/**
* @brief: ${4:brief}
* @param: `!p write_docstring_args(t[3],snip)`
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param}) {
    ${0:FunctionBody}
}
endsnippet

snippet fx "Basic function template" b
${1:ReturnType} ${2:FunctionName}(${3:param}) {
    ${0:FunctionBody}
}
endsnippet
# vim:ft=snippets:
